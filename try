import burp.*;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import java.awt.*;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class DecryptExtension implements IBurpExtender, ITextEditorTabFactory {
    private IExtensionHelpers helpers;

    @Override
    public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks) {
        helpers = callbacks.getHelpers();
        callbacks.setExtensionName("Decrypted Tab");

        callbacks.registerTextEditorTabFactory(this);
    }

    @Override
    public ITextEditor createTextEditor() {
        return new DecryptedTextEditor();
    }

    private class DecryptedTextEditor implements ITextEditor {
        private JTextArea textArea;
        private IHttpRequestResponse requestResponse;
        private String salt;
        private String iv;
        private String passPhrase;

        @Override
        public String getText() {
            return textArea.getText();
        }

        @Override
        public byte[] getTextBytes() {
            return textArea.getText().getBytes(StandardCharsets.UTF_8);
        }

        @Override
        public void setText(String s) {
            String decryptedText = decryptText(s);
            textArea.setText(decryptedText);
        }

        @Override
        public void setText(byte[] bytes) {
            String s = new String(bytes, StandardCharsets.UTF_8);
            setText(s);
        }

        @Override
        public void selectAll() {
            textArea.selectAll();
        }

        @Override
        public void copy() {
            textArea.copy();
        }

        @Override
        public void paste() {
            textArea.paste();
        }

        @Override
        public void cut() {
            textArea.cut();
        }

        @Override
        public boolean isEditable() {
            return true;
        }

        @Override
        public IHttpRequestResponse getRequestResponse() {
            return requestResponse;
        }

        @Override
        public void setRequestResponse(IHttpRequestResponse iHttpRequestResponse) {
            requestResponse = iHttpRequestResponse;

            // Retrieve salt, IV, and passphrase from the request header
            IRequestInfo requestInfo = helpers.analyzeRequest(iHttpRequestResponse);
            for (String header : requestInfo.getHeaders()) {
                if (header.startsWith("X-Csrf-Header:")) {
                    String[] parts = header.split(":");
                    if (parts.length > 1) {
                        String headerValue = parts[1].trim();
                        String[] headerParts = headerValue.split(",");
                        if (headerParts.length == 3) {
                            salt = headerParts[0].trim();
                            iv = headerParts[1].trim();
                            passPhrase = headerParts[2].trim();
                        }
                    }
                }
            }
        }

        @Override
        public IHttpService getHttpService() {
            return requestResponse.getHttpService();
        }

        @Override
        public Component getUiComponent() {
            return textArea;
        }

        private String decryptText(String encryptedText) {
            // Extract the encrypted text from the request body
            String encryptedBody = encryptedText.substring(encryptedText.indexOf(":") + 1, encryptedText.length() - 2);

            // Decrypt the encrypted body
            AesUtil aesUtil = new AesUtil(128, 1000);
            String decryptedBody = aesUtil.decrypt(salt, iv, passPhrase, encryptedBody);

            // Extract the hash value
            String hashInBase64 = encryptedText.substring(encryptedText.indexOf("\"hash\":\"") + 8, encryptedText.length() - 2);

            // Calculate the hash of the decrypted body
            String plaintext = decryptedBody + ",\"hash\":\"" + hashInBase64 + "\"";
            String calculatedHash = calculateHash(plaintext);

            // Verify the hash value
            if (!calculatedHash.equals(hashInBase64)) {
                return "Decryption failed: Hash verification failed";
            }

            // Return the decrypted body
            return decryptedBody;
        }

        private String calculateHash(String plaintext) {
            byte[] plaintextBytes = plaintext.getBytes(StandardCharsets.UTF_8);
            byte[] ivBytes = iv.getBytes(StandardCharsets.UTF_8);

            byte[] hash = calculateHmacSHA256(plaintextBytes, ivBytes);
            return base64Encode(hash);
        }

        private byte[] calculateHmacSHA256(byte[] data, byte[] key) {
            try {
                Mac mac = Mac.getInstance("HmacSHA256");
                SecretKeySpec keySpec = new SecretKeySpec(key, "HmacSHA256");
                mac.init(keySpec);
                return mac.doFinal(data);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        private String base64Encode(byte[] data) {
            return Base64.getEncoder().encodeToString(data);
        }

        DecryptedTextEditor() {
            textArea = new JTextArea();
            textArea.setEditable(true);
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(true);
        }
    }

    private class AesUtil {
        private final int keySize;
        private final int iterationCount;

        AesUtil(int keySize, int iterationCount) {
            this.keySize = keySize / 8;
            this.iterationCount = iterationCount;
        }

        private byte[] generateKey(String salt, String passPhrase) {
            byte[] saltBytes = hexStringToByteArray(salt);
            return PBKDF2(passPhrase.toCharArray(), saltBytes, keySize, iterationCount);
        }

        private String decrypt(String salt, String iv, String passPhrase, String cipherText) {
            byte[] key = generateKey(salt, passPhrase);
            byte[] cipherBytes = base64Decode(cipherText);
            byte[] decryptedBytes = AESDecrypt(cipherBytes, key, hexStringToByteArray(iv));
            return new String(decryptedBytes, StandardCharsets.UTF_8);
        }

        private byte[] PBKDF2(char[] password, byte[] salt, int keyLength, int iterations) {
            try {
                SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
                PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, keyLength * 8);
                SecretKey key = skf.generateSecret(spec);
                return key.getEncoded();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        private byte[] AESDecrypt(byte[] cipherText, byte[] key, byte[] iv) {
            try {
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
                SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
                IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
                cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);
                return cipher.doFinal(cipherText);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        private byte[] base64Decode(String base64Text) {
            return Base64.getDecoder().decode(base64Text);
        }

        private byte[] hexStringToByteArray(String hexString) {
            int len = hexString.length();
            byte[] data = new byte[len / 2];
            for (int i = 0; i < len; i += 2) {
                data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4)
                        + Character.digit(hexString.charAt(i + 1), 16));
            }
            return data;
        }
    }
}
